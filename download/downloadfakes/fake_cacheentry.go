// Code generated by counterfeiter. DO NOT EDIT.
package downloadfakes

import (
	"hash"
	"io"
	"sync"

	"github.com/pivotal-cf/spring-cloud-dataflow-for-pcf-cli-plugin/download/cache"
)

type FakeCacheEntry struct {
	RetrieveStub        func() (path string, etag string, err error)
	retrieveMutex       sync.RWMutex
	retrieveArgsForCall []struct{}
	retrieveReturns     struct {
		result1 string
		result2 string
		result3 error
	}
	retrieveReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 error
	}
	StoreStub        func(contents io.ReadCloser, etag string, checksum string, hashFunc hash.Hash) error
	storeMutex       sync.RWMutex
	storeArgsForCall []struct {
		contents io.ReadCloser
		etag     string
		checksum string
		hashFunc hash.Hash
	}
	storeReturns struct {
		result1 error
	}
	storeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCacheEntry) Retrieve() (path string, etag string, err error) {
	fake.retrieveMutex.Lock()
	ret, specificReturn := fake.retrieveReturnsOnCall[len(fake.retrieveArgsForCall)]
	fake.retrieveArgsForCall = append(fake.retrieveArgsForCall, struct{}{})
	fake.recordInvocation("Retrieve", []interface{}{})
	fake.retrieveMutex.Unlock()
	if fake.RetrieveStub != nil {
		return fake.RetrieveStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.retrieveReturns.result1, fake.retrieveReturns.result2, fake.retrieveReturns.result3
}

func (fake *FakeCacheEntry) RetrieveCallCount() int {
	fake.retrieveMutex.RLock()
	defer fake.retrieveMutex.RUnlock()
	return len(fake.retrieveArgsForCall)
}

func (fake *FakeCacheEntry) RetrieveReturns(result1 string, result2 string, result3 error) {
	fake.RetrieveStub = nil
	fake.retrieveReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCacheEntry) RetrieveReturnsOnCall(i int, result1 string, result2 string, result3 error) {
	fake.RetrieveStub = nil
	if fake.retrieveReturnsOnCall == nil {
		fake.retrieveReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 error
		})
	}
	fake.retrieveReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCacheEntry) Store(contents io.ReadCloser, etag string, checksum string, hashFunc hash.Hash) error {
	fake.storeMutex.Lock()
	ret, specificReturn := fake.storeReturnsOnCall[len(fake.storeArgsForCall)]
	fake.storeArgsForCall = append(fake.storeArgsForCall, struct {
		contents io.ReadCloser
		etag     string
		checksum string
		hashFunc hash.Hash
	}{contents, etag, checksum, hashFunc})
	fake.recordInvocation("Store", []interface{}{contents, etag, checksum, hashFunc})
	fake.storeMutex.Unlock()
	if fake.StoreStub != nil {
		return fake.StoreStub(contents, etag, checksum, hashFunc)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.storeReturns.result1
}

func (fake *FakeCacheEntry) StoreCallCount() int {
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	return len(fake.storeArgsForCall)
}

func (fake *FakeCacheEntry) StoreArgsForCall(i int) (io.ReadCloser, string, string, hash.Hash) {
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	return fake.storeArgsForCall[i].contents, fake.storeArgsForCall[i].etag, fake.storeArgsForCall[i].checksum, fake.storeArgsForCall[i].hashFunc
}

func (fake *FakeCacheEntry) StoreReturns(result1 error) {
	fake.StoreStub = nil
	fake.storeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCacheEntry) StoreReturnsOnCall(i int, result1 error) {
	fake.StoreStub = nil
	if fake.storeReturnsOnCall == nil {
		fake.storeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.storeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCacheEntry) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.retrieveMutex.RLock()
	defer fake.retrieveMutex.RUnlock()
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCacheEntry) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cache.CacheEntry = new(FakeCacheEntry)
