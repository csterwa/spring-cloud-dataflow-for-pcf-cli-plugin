// This file was generated by counterfeiter
package downloadfakes

import (
	"sync"

	"github.com/pivotal-cf/spring-cloud-dataflow-for-pcf-cli-plugin/download"
)

type FakeHttpRequest struct {
	SetHeaderStub        func(key string, value string)
	setHeaderMutex       sync.RWMutex
	setHeaderArgsForCall []struct {
		key   string
		value string
	}
	SendRequestStub        func() (download.HttpResponse, error)
	sendRequestMutex       sync.RWMutex
	sendRequestArgsForCall []struct{}
	sendRequestReturns     struct {
		result1 download.HttpResponse
		result2 error
	}
	sendRequestReturnsOnCall map[int]struct {
		result1 download.HttpResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHttpRequest) SetHeader(key string, value string) {
	fake.setHeaderMutex.Lock()
	fake.setHeaderArgsForCall = append(fake.setHeaderArgsForCall, struct {
		key   string
		value string
	}{key, value})
	fake.recordInvocation("SetHeader", []interface{}{key, value})
	fake.setHeaderMutex.Unlock()
	if fake.SetHeaderStub != nil {
		fake.SetHeaderStub(key, value)
	}
}

func (fake *FakeHttpRequest) SetHeaderCallCount() int {
	fake.setHeaderMutex.RLock()
	defer fake.setHeaderMutex.RUnlock()
	return len(fake.setHeaderArgsForCall)
}

func (fake *FakeHttpRequest) SetHeaderArgsForCall(i int) (string, string) {
	fake.setHeaderMutex.RLock()
	defer fake.setHeaderMutex.RUnlock()
	return fake.setHeaderArgsForCall[i].key, fake.setHeaderArgsForCall[i].value
}

func (fake *FakeHttpRequest) SendRequest() (download.HttpResponse, error) {
	fake.sendRequestMutex.Lock()
	ret, specificReturn := fake.sendRequestReturnsOnCall[len(fake.sendRequestArgsForCall)]
	fake.sendRequestArgsForCall = append(fake.sendRequestArgsForCall, struct{}{})
	fake.recordInvocation("SendRequest", []interface{}{})
	fake.sendRequestMutex.Unlock()
	if fake.SendRequestStub != nil {
		return fake.SendRequestStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.sendRequestReturns.result1, fake.sendRequestReturns.result2
}

func (fake *FakeHttpRequest) SendRequestCallCount() int {
	fake.sendRequestMutex.RLock()
	defer fake.sendRequestMutex.RUnlock()
	return len(fake.sendRequestArgsForCall)
}

func (fake *FakeHttpRequest) SendRequestReturns(result1 download.HttpResponse, result2 error) {
	fake.SendRequestStub = nil
	fake.sendRequestReturns = struct {
		result1 download.HttpResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpRequest) SendRequestReturnsOnCall(i int, result1 download.HttpResponse, result2 error) {
	fake.SendRequestStub = nil
	if fake.sendRequestReturnsOnCall == nil {
		fake.sendRequestReturnsOnCall = make(map[int]struct {
			result1 download.HttpResponse
			result2 error
		})
	}
	fake.sendRequestReturnsOnCall[i] = struct {
		result1 download.HttpResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpRequest) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setHeaderMutex.RLock()
	defer fake.setHeaderMutex.RUnlock()
	fake.sendRequestMutex.RLock()
	defer fake.sendRequestMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeHttpRequest) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ download.HttpRequest = new(FakeHttpRequest)
