// This file was generated by counterfeiter
package downloadfakes

import (
	"sync"

	"github.com/pivotal-cf/spring-cloud-dataflow-for-pcf-cli-plugin/download"
)

type FakeHttpHelper struct {
	CreateHttpRequestStub        func(method string, url string) (download.HttpRequest, error)
	createHttpRequestMutex       sync.RWMutex
	createHttpRequestArgsForCall []struct {
		method string
		url    string
	}
	createHttpRequestReturns struct {
		result1 download.HttpRequest
		result2 error
	}
	createHttpRequestReturnsOnCall map[int]struct {
		result1 download.HttpRequest
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHttpHelper) CreateHttpRequest(method string, url string) (download.HttpRequest, error) {
	fake.createHttpRequestMutex.Lock()
	ret, specificReturn := fake.createHttpRequestReturnsOnCall[len(fake.createHttpRequestArgsForCall)]
	fake.createHttpRequestArgsForCall = append(fake.createHttpRequestArgsForCall, struct {
		method string
		url    string
	}{method, url})
	fake.recordInvocation("CreateHttpRequest", []interface{}{method, url})
	fake.createHttpRequestMutex.Unlock()
	if fake.CreateHttpRequestStub != nil {
		return fake.CreateHttpRequestStub(method, url)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createHttpRequestReturns.result1, fake.createHttpRequestReturns.result2
}

func (fake *FakeHttpHelper) CreateHttpRequestCallCount() int {
	fake.createHttpRequestMutex.RLock()
	defer fake.createHttpRequestMutex.RUnlock()
	return len(fake.createHttpRequestArgsForCall)
}

func (fake *FakeHttpHelper) CreateHttpRequestArgsForCall(i int) (string, string) {
	fake.createHttpRequestMutex.RLock()
	defer fake.createHttpRequestMutex.RUnlock()
	return fake.createHttpRequestArgsForCall[i].method, fake.createHttpRequestArgsForCall[i].url
}

func (fake *FakeHttpHelper) CreateHttpRequestReturns(result1 download.HttpRequest, result2 error) {
	fake.CreateHttpRequestStub = nil
	fake.createHttpRequestReturns = struct {
		result1 download.HttpRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpHelper) CreateHttpRequestReturnsOnCall(i int, result1 download.HttpRequest, result2 error) {
	fake.CreateHttpRequestStub = nil
	if fake.createHttpRequestReturnsOnCall == nil {
		fake.createHttpRequestReturnsOnCall = make(map[int]struct {
			result1 download.HttpRequest
			result2 error
		})
	}
	fake.createHttpRequestReturnsOnCall[i] = struct {
		result1 download.HttpRequest
		result2 error
	}{result1, result2}
}

func (fake *FakeHttpHelper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createHttpRequestMutex.RLock()
	defer fake.createHttpRequestMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeHttpHelper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ download.HttpHelper = new(FakeHttpHelper)
